function[] = plot_figure_3(output_filename)
    
    close all; 
    
    % get path to skewnormal input files
    slash = '/'; if (ispc); slash = '\'; end
    directory = strcat('IEEE-TCST-2021',slash,'misc',slash,'skewnormal_example',slash);

    % handle missing files or load data
    means_filepath = strcat(directory, 'skewnormal_example_means.mat');
    variances_filepath = strcat(directory, 'skewnormal_example_variances.mat');
    controls_filepath = strcat(directory, 'skewnormal_example_controls.mat');
    error_message_base = 'The file can be generated by running the skewnormal_example.nb in Mathematica or downloaded from https://github.com/Risk-Sensitive-Reachability/IEEE-TCST-2021.';
    if ~isfile(means_filepath)
        error(['Expected skewnormal_example_means.mat in misc/skewnormal_example. ', error_message_base]);
    end
    if ~isfile(variances_filepath)
        error(['Expected skewnormal_example_variances.mat in misc/skewnormal_example.', error_message_base]);
    end
    if ~isfile(controls_filepath)
        error(['Expected skewnormal_example_controls.mat in misc/skewnormal_example.', error_message_base]);
    end
    means = load('skewnormal_example_means.mat', 'Expression1').Expression1;
    variances = load('skewnormal_example_variances.mat', 'Expression1').Expression1;
    controls = load('skewnormal_example_controls.mat', 'Expression1').Expression1; 
    
    
    gammas = linspace(0,5,500);          % draw 500 gammas linearly spaced from 0 to 5
    ce = means + gammas .* variances;    % calculate ce for each gamma and u
                                         %   each column in ce corresponds to a gamma in 'gammas'
                                         %   each row in ce corresponds to a u in 'controls'
    
    
    % plot ce for first, last, and every 25th value of gamma
    hold on; 
    for gammaIndex = 1:length(gammas)

        isFirstGamma = gammaIndex == 1; 
        isLastGamma = gammaIndex == length(gammas); 
        isAMultipleOf25 = mod(gammaIndex, 25) == 0;

        if isFirstGamma || isLastGamma || isAMultipleOf25
            plot(controls, ce(:,gammaIndex), '-', 'LineWidth',2);
        end

    end

    % plot and optimal points for first, last, and every 25th value of gamma
    for gammaIndex = 1:length(gammas)

        isFirstGamma = gammaIndex == 1; 
        isLastGamma = gammaIndex == length(gammas); 
        isAMultipleOf25 = mod(gammaIndex, 25) == 0;

        if isFirstGamma || isLastGamma || isAMultipleOf25
           [optimal_ce, optimal_u_index] = min(ce(:,gammaIndex));
           plot(controls(optimal_u_index), optimal_ce, 'o', 'MarkerFaceColor','k', ...
                'Color', 'None');

           if isFirstGamma
              text(...
                  controls(optimal_u_index) + 0.01,...
                  optimal_ce-0.5, strcat('$$\gamma =',{' '},mat2str(gammas(gammaIndex)), '$$'),...
                  'FontSize', 13);
           end

           if isLastGamma
              text(...
                  controls(optimal_u_index) - 0.03,...
                  optimal_ce+0.6, strcat('$$\gamma =',{' '},mat2str(gammas(gammaIndex)), '$$'),...
                  'FontSize', 13);
           end
        end

    end


    [optimal_ce, optimal_u_index] = min(ce);

    % uncomment the line below to draw optimal curve connecting black dots
    % plot(dense_controls(optimal_u_index),optimal_ce,'LineWidth',2,'Color','Black'); 

    ylabelstring = 'ce[$$\phi(u, W),\gamma$$]';

    % build the legend
    h = zeros(1, 1);
    h(1) = plot(NaN,NaN,'-','LineWidth', 2, 'Color', '#888888');
    h(2) = plot(NaN,NaN,'o','LineWidth', 2, 'MarkerFaceColor', 'Black', 'Color', 'None');
    legend(h, ylabelstring, 'ce[$$\phi(u^\ast,W),\gamma$$]', ...
        'FontSize', 13, 'Orientation', 'vertical', 'Location', 'northeast');
    legend boxon; 

    xlabel('$u$'); ylabel(ylabelstring); title(strcat(ylabelstring, {' '}, ' for $$\gamma \in [0, 5]$$'));
    ylim([0, 16]); 
    set(gca, 'FontSize', 13); 
    grid off; 

    % save the image
    set(gcf,'Units','Inches'); 
    pos = get(gcf, 'Position'); 
    set(gcf,'PaperPositionMode','Auto','PaperUnits','Inches','PaperSize',[pos(3), pos(4)])
    print(gcf,output_filename,'-dpdf','-r0')

end